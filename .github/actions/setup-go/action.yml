name: 'Setup the Go environment'
description: 'Installs go and restores/saves the build/module cache'
runs:
  using: "composite"
  steps:
  - name: Set up Go
    uses: actions/setup-go@v2
    with:
      go-version: ${{ matrix.go }}
      stable: ${{ !contains(matrix.go, 'rc') }}

  # Restore original modification time of files based on the date of the most recent commit that modified them.
  # `git clone` sets the modification time to the current time, but Go tests that access fixtures get
  # invalidated if their modification times change.
  - name: Restore modification time of checkout files
    shell: bash
    run: |
      sudo apt-get install -y git-restore-mtime
      git restore-mtime -v

  # The PREFIX must uniquely identify the specific instance of a job executing.
  - shell: bash
    run: echo 'PREFIX=${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-matrix(${{ join(matrix.*,'|') }})' >> $GITHUB_ENV

  # Cache the Go Modules downloaded during the job.
  - uses: actions/cache@v2
    with:
      path: ~/go/pkg/mod
      key: ${{ env.PREFIX }}-go-mod-${{ hashFiles('**/go.sum') }}
      restore-keys: ${{ env.PREFIX }}-go-mod

  # Cache any build and test artifacts during the job, which will speed up
  # rebuilds and cause test runs to skip tests that have no reason to rerun.
  # Don't run this for protected branches like master/main.
  - uses: actions/cache@v2
    if: ${{ github.ref_protected || github.ref != 'master' || github.ref != 'main' }}
    with:
      path: ~/.cache/go-build
      key: ${{ env.PREFIX }}-go-build-${{ github.ref }}-${{ hashFiles('**', '!.git') }}
      restore-keys: |
        ${{ env.PREFIX }}-go-build-${{ github.ref }}
        ${{ env.PREFIX }}-go-build
