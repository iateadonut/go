name: Horizon

on:
  push:
    branches: [master]
  pull_request:

jobs:

  integration:
    strategy:
      matrix:
        os: [ubuntu-latest]
        go: [1.17]
        pg: [9.6.5]
        ingestion-backend: [db, captive-core, captive-core-remote-storage]
        captive-core: [18.0.3-746.f3baea6.focal]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:${{ matrix.pg }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432
    env:
      HORIZON_INTEGRATION_TESTS: "true"
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres
    steps:
    - uses: actions/checkout@v2
    - name: Restore modification time of checkout files
      # `git clone` sets the modification time of tiles in the working directory to the current time.
      # Restore original modification time of files based on the date of the most recent commit that modified them.
      # Otherwise, Golang test caching doesn't work for tests opening input files (e.g. fixtures)
      # in the repository.
      run: |
        stat -c '%n: %y' . services/horizon/internal/integration .dockerignore
        sudo apt-get update && sudo apt-get install -y git-restore-mtime
        git restore-mtime -v -c
        stat -c '%n: %y' . services/horizon/internal/integration .dockerignore
        touch .dockerignore
        stat -c '%n: %y'  .dockerignore
        touch -d "2 hours ago" .dockerignore
        stat -c '%n: %y' .dockerignore
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}
    - uses: ./.github/actions/cache-go
      # Note that cache-go does very little for integration tests as the
      # integration tests are not cacheable and `go test` reruns all the tests.
    - name: Pull latest Stellar Core image
      run: docker pull stellar/stellar-core
    - if: ${{ startsWith(matrix.ingestion-backend, 'captive-core') }}
      name: Install and enable Captive Core
      run: |
        sudo wget -qO - https://apt.stellar.org/SDF.asc | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true sudo apt-key add -
        sudo bash -c 'echo "deb https://apt.stellar.org focal unstable" > /etc/apt/sources.list.d/SDF-unstable.list'
        sudo apt-get update && sudo apt-get install -y stellar-core=${{ matrix.captive-core }}
        echo "Using stellar core version $(stellar-core version)"
        echo 'HORIZON_INTEGRATION_ENABLE_CAPTIVE_CORE=true' >> $GITHUB_ENV
        echo 'CAPTIVE_CORE_BIN=/usr/bin/stellar-core'       >> $GITHUB_ENV
    - if: ${{ matrix.ingestion-backend == 'captive-core-remote-storage' }}
      name: Setup Captive Core Remote Storage
      run: echo 'HORIZON_INTEGRATION_ENABLE_CAPTIVE_CORE_USE_DB=true' >> $GITHUB_ENV
    - run: GODEBUG='gocachehash=1,gocachetest=1' go test -race -timeout 25m -v ./services/horizon/internal/integration/...

